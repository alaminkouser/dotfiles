#!/bin/sh

NOTES="$HOME/.local/share/notes"

TOOLS="fzf glow deno rclone pandoc"

for tool in $TOOLS; do
  which $tool > /dev/null 2>&1 || {
    echo "$tool not found"
    exit 1
  }
done

function selectFile() {
  find $NOTES -name "*.md" | tac | while IFS= read -r filePath; do
      cat "$filePath" | tr "\n" " "
      printf ":"
      printf "$filePath" | sed "s|^$NOTES/||"
      printf "\n"
    done | fzf \
        --style minimal \
        --bind change:top \
        --reverse \
        --delimiter ":" \
        --preview \
        "sed -E \"s/\[\[[^|]+\|([^]]+)\]\]/\[\[\1\]\]/g\"  \"$NOTES/\$(echo {} | rev | cut -d ":" -f1 | rev)\" | pandoc -f markdown -t markdown --wrap=none | CLICOLOR_FORCE=1 COLORTERM=truecolor glow -w 0 --style dark" |\
        rev | cut -d ":" -f1 | rev
}

function checkFiles() {
    DATE_LIST=""
    while IFS= read -r filePath; do
        file_content="$(cat "$filePath")"
        # If file contains "#calendar" then extract the date from the first line. First Line is "# YYYYMMDD"
        if echo "$file_content" | grep -q "#calendar"; then
            file_date=$(echo "$file_content" | head -n 1 | sed -n "s/^# \([0-9]\{8\}\).*/\1/p")
            if [ -n "$file_date" ]; then
                DATE_LIST="$file_date\n$DATE_LIST"
            fi
        fi

        # Check for broken links in the file
        links="$(echo "$file_content" | grep -o "\[\[[^]]\+\]\]" | sed -E "s/\[\[([^#|]+)([#|][^]]*)?\]\]/\1/")"
        for link in $links; do
            if [ ! -f "$NOTES/$link.md" ]; then
                printf "Broken link [["%s"]] in file: %s\n" "$link" "$(echo "$filePath" | sed "s|^$NOTES/||")"
            fi
        done

    done < <(find "$NOTES" -name "*.md")

    # Print duplicate dates in DATE_LIST (i.e., dates that appear in multiple calendar items)
    echo -e "$DATE_LIST" | sort | uniq -d | while read -r dup_date; do
        if [ -n "$dup_date" ]; then
            echo "Duplicate calendar date found: $dup_date"
        fi
    done
}

function syncNotes() {
    if [ "$1" = "" ]; then
        printf "SYNCING: %s\n" "All Notes"
        rclone sync $NOTES DROPBOX:NOTES --refresh-times --metadata --ignore-times --progress
    else
        rclone sync --check-first --checksum $NOTES DROPBOX:/NOTES > /dev/null 2>&1 &
    fi
}

function endRun() {
    fmt="$(deno fmt --line-width 80 $NOTES 2>&1)"
    if [ $? -ne 0 ]; then
        echo "$fmt"
    fi
    checkFiles
    syncNotes "$1"
}

function helpText() {
    printf "      Usage: notes [c|r|u|d|sync]\n"
    printf "  ┌─────────────────────────────────┐\n"
    printf "  │  c    :    Create a new note    │\n" 
    printf "  │  r    :    Read a note          │\n"
    printf "  │  u    :    Update a note        │\n"
    printf "  │  d    :    Delete a note        │\n"
    printf "  │  sync :    Sync all notes       │\n"
    printf "  └─────────────────────────────────┘\n"
}

if [ $# -gt 1 ]; then
    helpText
    exit 0
fi

if [ "$1" = "sync" ]; then
    endRun
    exit 0
fi

if [ "$1" = "c" ]; then
    filenameID=$(date +%Y%m%d%H%M%S%N)
    printf "# %s\n\n" "$filenameID" > "$NOTES/$filenameID.md"
    $EDITOR "$NOTES/$filenameID.md"
    endRun "$filenameID.md"
    exit 0
fi

if [ "$1" = "r" ]; then
    selectedFile=$(selectFile)
    if [ -z "$selectedFile" ]; then
        printf "No file selected\n"
        exit 1
    else
        sed -E "s/\[\[[^|]+\|([^]]+)\]\]/\[\[\1\]\]/g"  "$NOTES/$selectedFile" | pandoc -f markdown -t markdown --wrap=none | glow -w 0 --style dark
    fi
    endRun "$selectedFile"
    exit 0
fi

if [ "$1" = "u" ]; then
    selectedFile=$(selectFile)
    if [ -z "$selectedFile" ]; then
        printf "No file selected\n"
        exit 1
    else
        $EDITOR "$NOTES/$selectedFile"
    fi
    endRun "$selectedFile"
    exit 0
fi

if [ "$1" = "d" ]; then
    selectedFile=$(selectFile)
    if [ -z "$selectedFile" ]; then
        printf "No file selected\n"
    else
        firstLine=$(head -n 1 "$NOTES/$selectedFile")
        printf "Are you sure you want to delete \"$firstLine\"? (y/n): "
        read -r confirm
        if [ "$confirm" = "y" ]; then
            rm "$NOTES/$selectedFile"
            endRun "$selectedFile"
        else
            printf "File not deleted\n"
        fi
    fi
    exit 0
fi

helpText

exit 0
