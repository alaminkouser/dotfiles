#!/bin/sh

NOTES="$HOME/.local/share/notes"

TOOLS="fzf glow deno rclone"

for tool in $TOOLS; do
  which $tool > /dev/null 2>&1 || {
    echo "$tool not found"
    exit 1
  }
done

function selectFile() {
  find $NOTES -name "*.md" | tac | while IFS= read -r filePath; do
      cat "$filePath" | tr "\n" " "
      printf ":"
      printf "$filePath" | sed "s|^$NOTES/||"
      printf "\n"
    done | fzf \
        --style minimal \
        --reverse \
        --delimiter ":" \
        --preview \
        "CLICOLOR_FORCE=1 COLORTERM=truecolor glow --style dark $NOTES/\$(echo {} | rev | cut -d ':' -f1 | rev)" |\
        rev | cut -d ":" -f1 | rev
}

function checkBrokenLinks() {
    find $NOTES -name "*.md" | while IFS= read -r filePath; do
        # Get all links in the current file
        grep -o '\[\[[^]]*\]\]' "$filePath" | while IFS= read -r link; do
            # Extract the link text (remove [[ and ]] and any pipe part)
            linkText=$(echo "$link" | sed -E 's/\[\[([^|]*)(\|[^]]*)?\]\]/\1/')
            # Check if the linked file exists
            if [ ! -f "$NOTES/$linkText.md" ]; then
                printf "Broken link '%s' in file: %s\n" "$linkText" "$(echo "$filePath" | sed "s|^$NOTES/||")"
            fi
        done
    done
}

function syncNotes() {
    if [ "$1" = "" ]; then
        printf "SYNCING: %s\n" "All Notes"
        rclone sync $NOTES MEGA:NOTES --refresh-times --metadata --ignore-times --progress
    else
        if [ -f "$NOTES/$1" ]; then
            printf "SYNCING: %s\n" "$1"
            rclone sync $NOTES/$1 MEGA:NOTES --refresh-times --metadata --ignore-times --quiet --stats=0 --include "$NOTES/$1" > /dev/null 2>&1 &
        else
            printf "DELETING: %s\n" "$1"
            rclone delete MEGA:NOTES/$1 --quiet --stats=0 > /dev/null 2>&1 &
        fi
    fi
}

function endRun() {
    fmt="$(deno fmt --line-width 80 $NOTES 2>&1)"
    if [ $? -ne 0 ]; then
        echo "$fmt"
    fi
    checkBrokenLinks
    syncNotes "$1"
}

function helpText() {
    printf "Usage: notes [c|r|u|d|sync]\n"
    printf "┌─────────────────────────────────┐\n"
    printf "│  c    :    Create a new note    │\n" 
    printf "│  r    :    Read a note          │\n"
    printf "│  u    :    Update a note        │\n"
    printf "│  d    :    Delete a note        │\n"
    printf "│  sync :    Sync all notes       │\n"
    printf "└─────────────────────────────────┘\n"
}

if [ $# -gt 1 ]; then
    helpText
    exit 0
fi

if [ "$1" = "sync" ]; then
    endRun
    exit 0
fi


if [ "$1" = "c" ]; then
    filenameID=$(date +%Y%m%d%H%M%S%N)
    printf "# %s\n\n" "$filenameID" > "$NOTES/$filenameID.md"
    nvim "$NOTES/$filenameID.md"
    endRun "$filenameID.md"
    exit 0
fi

if [ "$1" = "r" ]; then
    selectedFile=$(selectFile)
    if [ -z "$selectedFile" ]; then
        printf "No file selected\n"
        exit 1
    else
        glow "$NOTES/$selectedFile"
    fi
    endRun "$selectedFile"
    exit 0
fi

if [ "$1" = "u" ]; then
    selectedFile=$(selectFile)
    if [ -z "$selectedFile" ]; then
        printf "No file selected\n"
        exit 1
    else
        nvim "$NOTES/$selectedFile"
    fi
    endRun "$selectedFile"
    exit 0
fi

if [ "$1" = "d" ]; then
    selectedFile=$(selectFile)
    if [ -z "$selectedFile" ]; then
        printf "No file selected\n"
    else
        printf "Are you sure you want to delete $selectedFile? (y/n): "
        read -r confirm
        if [ "$confirm" = "y" ]; then
            rm "$NOTES/$selectedFile"
            endRun "$selectedFile"
            printf "File deleted\n"
        else
            printf "File not deleted\n"
        fi
    fi
    exit 0
fi


helpText

exit 0